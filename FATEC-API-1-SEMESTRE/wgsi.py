from wsgiref.simple_server import make_server
import json

# Implementa√ß√£o do protocolo de comunica√ß√£o entre o python e a web
# WSGI - Web Server Gateway Interface
# Esse padr√£o permitir√° que o navegador possa executar nosso c√≥digo para internet
# Refer√™ncia PEP333


class HttpResponse:
    """
    Essa classe montar o objeto de resposta HTTP, por meio das informa√ß√µes da requisi√ß√£o web.

    Atributos:
        header (dict): Esse √© um dicion√°rio para as informa√ß√µes header's HTTP
        body (str): O texto da resposta.
        content_type (str): O tipo que √© composto o texto; Str, bin√°rio, html.
        status (str): Um dos c√≥digos HTTP de status, ok, not_found. etc.

    Methods:
        __init__ (self, header, body, content_type, status): Inicializa a inst√¢ncia HTTP
        __iter__(self): Permite tornar o objeto iter√°vel
    """

    def __init__(
        self,
        content="",
        status="200 OK",
        headers={},
        content_type="text/html;charset=UTF-8",
    ):
        self.content = content
        self.status = status
        self.headers = headers
        self.headers["content-type"] = content_type
        self.headers["access-control-allow-origin"] = "*"

    def __iter__(self):
        # iter√°vel que ser√° escrito no body do response
        yield self.content.encode("utf-8")
        ## Fun√ß√£o retorna um response dado o request


class JsonResponse:
    """
    JSON √© o formato JavaScript Object Notation.
    Formato de dados leve e f√°cil de ler usado para transmitir dados
    estruturados entre um servidor e um cliente. Amplamente utilizado
    em APIs para transmitir informa√ß√µes. Importante a diferen√ßa entre
    resposta JSON e resposta HTTP

    Methods:
        __init__ (self, header, body, content_type, status): Inicializa a inst√¢ncia HTTP
        __iter__(self): Permite tornar o objeto iter√°vel

    """

    def __init__(
        self, content="{}", status="200 OK", headers={}, content_type="application/json"
    ):
        self.content = json.dumps(content)
        self.status = status
        self.headers = headers
        self.headers["content-type"] = content_type
        self.headers["access-control-allow-origin"] = "*"

    def __iter__(self):
        # iter√°vel que ser√° escrito no body do response
        yield self.content.encode("utf-8")


class HTTPRequest:
    def __init__(self, environ):
        self.method = environ.get("REQUEST_METHOD", "GET")
        # URL
        self.path = environ.get("PATH_INFO", "/")
        # 'PATH_INFO' √© uma das chaves no dicion√°rio environ.
        # Ela cont√©m a parte da URL da solicita√ß√£o ap√≥s o nome do dom√≠nio e a porta,
        # ou seja, a parte do caminho da URL que segue a barra (/).
        # Por exemplo, para a URL "http://example.com/pagina", 'PATH_INFO' conteria "/pagina".
        self.query_string = environ.get("QUERY_STRING", "")
        self.content_type = environ.get("CONTENT_TYPE", "")
        # Por padr√£o os headers come√ßam com HTTP_
        # retira o HTTP_ e deixa tudo em min√∫scilo
        self.headers = {
            key[5:].lower(): value
            for key, value in environ.items()
            if key.startswith("HTTP_")
        }
        self.environ = environ
        try:
            request_body_size = int(environ.get("CONTENT_LENGTH", 0))
        except ValueError:
            request_body_size = 0

        # l√™ o corpo do request HTTP
        self.body = environ["wsgi.input"].read(request_body_size).decode("utf-8")


def retorna_response(environ, start_response):
    from urls import url_match

    """
    Essa √© a fun√ß√£o desenhada no padr√£o WSGI. Recebe request do navegador e gera response adequado.

    Args:
        environ (dict): Conte√∫do preenchido pelo servidor. Como o m√©todo HTTP, cabe√ßalhos, URL,
        par√¢metros de consulta e outras informa√ß√µes relacionadas √† solicita√ß√£o.
        start_response (str): callback enviado pelo servidor para acionar a requisi√ß√£o.
        """
    request = HTTPRequest(environ)
    view = url_match(request.path)
    response = view(request)
    start_response(response.status, list(response.headers.items()))
    return response


if __name__ == "__main__":
    print("üöÄ Servidor HTTP rodando! üöÄ \n Acesse o servidor em: 127.0.0.1:8080")
    server = make_server("127.0.0.1", 8080, retorna_response)
    server.serve_forever()
